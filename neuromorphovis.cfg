####################################################################################################
# Copyright (c) 2016 - 2023, EPFL / Blue Brain Project
#               Marwan Abdellah <marwan.abdellah@epfl.ch>
#
# This file is part of NeuroMorphoVis <https://github.com/BlueBrain/NeuroMorphoVis>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the
# GNU General Public License as published by the Free Software Foundation, version 3 of the License.
#
# This Blender-based tool is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <http://www.gnu.org/licenses/>.
####################################################################################################

####################################################################################################
### INPUT PARAMETERS
####################################################################################################
## Blender executable
#   Use the blender executable where you have installed NeuroMorphoVis
BLENDER_EXECUTABLE=../../../../blender

## Input source
#   Use ['file'] for loading .H5 or .SWC morphology files
#   Use ['directory'] for loading a directory contains .H5 or .SWC morphology files
#   Use ['gid'] for loading a single neuron in a BBP circuit (works only on BBP clusters)
#   Use ['target'] for loading a target (group of GIDs) in a BBP circuit (works only on BBP clusters)
INPUT=directory

## Blue config
# A BBP circuit config required only if INPUT=target or INPUT=gid, otherwise ignored.
BLUE_CONFIG=SOME_BLUE_CONFIG

## A BBP cell target (or group of GIDs), if INPUT=target, otherwise ignored.
# TARGET=SOME_TARGET
TARGET=mc2_Column

## A BBP neuron GID, if INPUT=gid, otherwise ignored.
GID=136187

## Morphology file, if INPUT=file, otherwise ignored.
MORPHOLOGY_FILE=SOME_MORPHOLOGY_FILE

# Morphology directory, if INPUT=directory, otherwise ignored.
# MORPHOLOGY_DIRECTORY=SOME_MORPHOLOGY_DIRECTORY
MORPHOLOGY_DIRECTORY=/ssd2/nmv-2.83/examples/input

####################################################################################################
### OUTPUT PARAMETERS
####################################################################################################
# Output directory
# This is where all the results (somas, morphologies, meshes, images, etc...) will be generated
# OUTPUT_DIRECTORY=SOME_OUTPUT_DIRECTORY
OUTPUT_DIRECTORY=/ssd2/nmv-2.83/examples/output

####################################################################################################
# EXECUTION PARAMETERS
####################################################################################################
## Execution node
#   Use ['local'] for running the framework on your machine
#   Use ['cluster'] for running the framework on the BBP visualization cluster
EXECUTION_NODE=local

####################################################################################################
# ANALYSIS PARAMETERS
####################################################################################################
## Analyse the morphology and create the analysis results to the output directory
#   Use ['yes' or '(no)']
ANALYZE_MORPHOLOGY_SKELETON=yes

####################################################################################################
# MORPHOLOGY / SOMA SKELETON PARAMETERS
####################################################################################################
## Morphology reconstruction method
#   Use ['connected-sections'], where sections are connected together (after repair)
#   Use ['disconnected-sections'], where sections are disconnected from each others
#   Use ['articulated-sections'], where sections are connected by spheres
#   Use ['disconnected-segments'], where segments are disconnected
#   Use ['samples'], to draw the morphology as a list of samples
MORPHOLOGY_RECONSTRUCTION_ALGORITHM=disconnected-segments

## Skeleton style
#   Use ['(original)'] for loading the original as specified in the morphology file
#   Use ['tapered'] for constructing a tapered skeleton
#   Use ['zigzag'] for constructing a zigzag algorithm
#   Use ['tapered-zigzag'] for constructing a tapered-zigzaged skeleton
#   Use ['planar'] to project the morphology on the XY plane
SKELETON_STYLE=original

## Soma representation
#   Use ['no'] to ignore the soma
#   Use ['sphere'] to render the soma as a symbolic sphere
#   Use ['softbody'] to reconstruct a 3D profile using soft body simulation
#   Use ['(metaballs)'] to reconstruct a 3D profile using meta-balls
SOMA_REPRESENTATION=metaballs

## Soma stiffness,
#   Range [0.01 - 0.99)] and default 0.25.
SOMA_STIFFNESS=0.05

## Soma subdivision level for softbody
#   Range [3 - 7] and default 4.
SOMA_SUBDIVISION_LEVEL=4

## Ignore the axon visualization
#   Use ['yes' or '(no)']
IGNORE_AXON=no

## Ignore basal dendrites visualization,
#   Use ['yes' or '(no)']
IGNORE_BASAL_DENDRITES=no

## Ignore apical dendrites visualization
#   Use ['yes' or '(no)']
IGNORE_APICAL_DENDRITES=no

## Maximum axon branching order of the axon
#   Range [1 - 1000], using 0 will ignore the arbor visualization
MAX_AXON_BRANCHING_ORDER=2

## Maximum basal dendrites branching order
#   Range [1 - 1000], using 0 will ignore the arbor visualization
MAX_BASAL_DENDRITES_BRANCHING_ORDER=1000

## Maximum apical dendrites branching order
#   Range [1 - 1000], using 0 will ignore the arbor visualization
MAX_APICAL_DENDRITES_BRANCHING_ORDER=1000

## Branching method
## This method is valid if: MORPHOLOGY_RECONSTRUCTION_ALGORITHM=connected-sections
#   Use ['angles'] to connect the largest angle child to the parent
#   Use ['radii'] to connect the largest radius child to the parent
BRANCHING_METHOD=radii

## Samples' radii
#   Use ['(default)'] to use the reported radii in the morphology file
#   Use ['scaled'] to scale the samples with a specific scale factor RADII_SCALE_FACTOR
#   Use ['filtered'] to set the minimum and maximum thresholds
#       Update the MINIMUM_SAMPLE_RADIUS and MAXIMUM_SAMPLE_RADIUS parameters
#   Use ['unified'] to have unified section radius for all the arbors
#       You can set this unified radius in the UNIFIED_SAMPLES_RADIUS parameter
#   Use ['type-unified'] to have unified samples radius per arbor
#       You can set the per-arbor unified radii in the following parameters
#           AXON_RADIUS,
#           APICAL_DENDRITES_RADIUS
#           BASAL_DENDRITES_RADIUS
SAMPLES_RADII=default

## Radii scale factor if SAMPLES_RADII=scaled, otherwise ignored
#   Range [0.01 - 10], by default 1.0
RADII_SCALE_FACTOR=1.0

## Sample unified radius value if SAMPLES_RADII=unified, otherwise ignored
#   Range [0.01 - 10], by default 1.0
UNIFIED_SAMPLES_RADIUS=1.0

## Per-arbor radius if SAMPLES_RADII=type-unified, otherwise ignored
#   Range [0.01 - 10], by default 1.0
AXON_RADIUS=1.0
APICAL_DENDRITES_RADIUS=1.0
BASAL_DENDRITES_RADIUS=1.0

## Threshold radii if SAMPLES_RADII=filtered, otherwise ignored
MINIMUM_SAMPLE_RADIUS=0.00001
MAXIMUM_SAMPLE_RADIUS=10

## Sections bevel sides, reflecting number of sides per cross section and their quality
#   Range [4 - 128] by default 16
SECTION_BEVEL_SIDES=16

## Save morphology .swc file
#   Use ['yes' or '(no)']
EXPORT_NEURON_MORPHOLOGY_SWC=no

## Save morphology .blend file
#   Use ['yes' or '(no)']
EXPORT_NEURON_MORPHOLOGY_BLEND=no

## Save morphology .segments file
#   Use ['yes' or '(no)']
EXPORT_NEURON_MORPHOLOGY_SEGMENTS=no

## Morphology color coding, maps the structure of the morphology into colors based on a selected
# feature
#   Use ['(default)'] for assigning colors based on the values given in the SHADING PARAMETERS
#   Use ['homogeneous'] to use a homogeneous color to all the structures in the morphology
#   Use ['alternating'] to use alternating colors over the different components in the structure
#   Use ['radius'] to color the components according to their average radius
#   Use ['length'] to color the components according to their length
#   Use ['area'] to color the components according to their area
#   Use ['volume'] to color the components according to their volume
#   Use ['number-samples'] to color the section according to the number of samples it contain
#   Use ['path-distance'] to color the segments based on their path distance from soma
#   Use ['euclidean-distance'] ro the segments based on their Euclidean distance from the origin
#   Use ['short-sections'] to color short sections in red
MORPHOLOGY_COLOR_CODING_SCHEME=radius

## The colormap used to color the morphology skeleton in case of color coding (matplotlib compatible)
#   Use ['(gnuplot)', 'gnuplot2', 'rainbow', 'jet', 'turbo', 'rainbow', 'reds', 'blues', 'greens',
#        'spectral', 'magma', 'viridis', 'plasma', 'terrain', 'dark2','tab10', 'gray']
MORPHOLOGY_COLORMAP=magma

####################################################################################################
# MESH PARAMETERS
####################################################################################################
## Meshing technique
#   Use ['(piecewise-watertight)'] for creating piece-wise watertight meshes
#   Use ['union'] for creating meshes using the Union-based meshing algorithm
#   Use ['skinning'] for creating connected and high quality meshes for artistic rendering
#   Use ['metaballs'] for creating simulation-ready meshes that are watertight
MESHING_TECHNIQUE=metaballs

## Mesh edges
#   Use ['smooth'] for smooth edges
#   Use ['hard'] for hard edges
EDGES=smooth

# Mesh surface
#   Use ['(smooth)'] for smooth surface
#   Use ['rough'] for rough surface
SURFACE=smooth

## Connect the soma mesh to the arbors smoothly
#   Use ['yes' or '(no)']
CONNECT_SOMA_MESH_TO_ARBORS=no

## Mesh Tessellation (between 0.1 and 1.0)
# Range [0.01 - 0.9], default 0.5
TESSELLATION_LEVEL=0.25

## Export the mesh in the global coordinates
#   Use ['yes' or '(no)']
GLOBAL_COORDINATES=no

## Spines
#   Use ['ignore'] for ignoring building the spines
#   Use ['circuit'] for building spines from a BBP circuit
#   Use ['random'] for building random spines.
SPINES=ignore

## Spines meshes quality
#   Use ['hq'] for loading high quality meshes
#   Use ['lq'] for loading low quality meshes
SPINES_QUALITY=lq

## Number of spines per micron, if SPINES=random
NUMBER_SPINES_PER_MICRON=1

# Add nucleus mesh
#   Use ['yes' or '(no)']
ADD_NUCLEUS=no

# Export soma .ply mesh
#   Use ['yes' or '(no)']
EXPORT_SOMA_MESH_PLY=no

# Save soma .obj mesh
#   Use ['yes' or '(no)']
EXPORT_SOMA_MESH_OBJ=no

# Save soma .stl mesh
#   Use ['yes' or '(no)']
EXPORT_SOMA_MESH_STL=no

# Save soma .blend mesh
#   Use ['yes' or '(no)']
EXPORT_SOMA_MESH_BLEND=no

# Export neuron mesh as a .ply file
#   Use ['yes' or '(no)']
EXPORT_NEURON_MESH_PLY=no

# Export neuron mesh as a .obj file
#   Use ['yes' or '(no)']
EXPORT_NEURON_MESH_OBJ=no

# Export neuron mesh as a .stl file
#   Use ['yes' or '(no)']
EXPORT_NEURON_MESH_STL=no

# Export neuron mesh as a .blend file
#   Use ['yes' or '(no)']
EXPORT_NEURON_MESH_BLEND=no

# Save each part (or compartments) of the mesh as a separate file for tagging
#   Use ['yes' or '(no)']
EXPORT_INDIVIDUAL_COMPARTMENTS=no

####################################################################################################
# SHADING PARAMETERS
####################################################################################################
## Soma RGB color in the form of 'R_G_B'
#   Value [R_G_B], for example: [0.1_0.5_0.8]
SOMA_COLOR=1.0_0.8_0.15

## Axon RGB color in the form of 'R_G_B'
#   Value [R_G_B], for example: [0.1_0.5_0.8]
AXON_COLOR=0.4_0.7_1.0

## Basal dendrites RGB color in the form of 'R_G_B'
#   Value [R_G_B], for example: [0.1_0.5_0.8]
BASAL_DENDRITES_COLOR=0.9_0.1_0.075

## Apical dendrite RGB color in the form of 'R_G_B'
#   Value [R_G_B], for example: [0.1_0.5_0.8]
APICAL_DENDRITE_COLOR=0.4_0.9_0.2

## Spines RGB color in the form of 'R_G_B'
#   Value [R_G_B], for example: [0.1_0.5_0.8]
SPINES_COLOR=0.1_0.75_0.45

## Nucleus RGB color in the form of 'R_G_B'
#   Value [R_G_B], for example: [0.1_0.5_0.8]
NUCLEUS_COLOR=0.75_0.41_0.77

## Articulations color RGB in the form of 'R_G_B', for example '1.0_0.5_0.25' or '255_128_64'
# This color is applied only if MORPHOLOGY_RECONSTRUCTION_ALGORITHM=articulated-sections
#   Value [R_G_B], for example: [0.1_0.5_0.8]
ARTICULATIONS_COLOR=50_115_182

# Shader, refer to the documentation to see all the shading modes and some examples 
#   Use ['default'] for a default shader (lambert-ward)
#   Use ['transparent'] for transparent shader
#   Use ['flat'] for flat shader (like matplotlib)
#   Use ['toon'] for cartoon shader
#   Use ['electron-light'] for electron microscopy like shader
#   Use ['electron-dark'] for an inverted electron microscopy like shader
#   Use ['super-electron-light'] for super electron microscopy like shader
#   Use ['super-electron-dark'] for inverted super electron microscopy like shader
#   Use ['glossy'] for a glossy shader like plastic
#   Use ['glossy-bumpy'] for a glossy with some bumps on the surface
SHADER=flat

####################################################################################################
# RENDERING PARAMETERS
####################################################################################################
## Render a static frame of the soma only
#   Use ['yes' or '(no)']
RENDER_SOMA_IMAGE=no

## Render a sequence of frames reflecting the progressive reconstruction of the soma
#   Use ['yes' or '(no)']
RENDER_SOMA_PROGRESSIVE_SEQUENCE=no

## Render a 360 sequence of the final reconstructed soma
#   Use ['yes' or '(no)']
RENDER_SOMA_360_SEQUENCE=no

## Render a static frame of the reconstructed morphology
#   Use ['yes' or '(no)']
RENDER_NEURON_MORPHOLOGY_IMAGE=yes

## Render a 360 sequence of the reconstructed morphology
#   Use ['yes' or '(no)']
RENDER_NEURON_MORPHOLOGY_360_SEQUENCE=no

## Render a sequence of frames showing the progressive reconstruction of the morphology
#   Use ['yes' or '(no)']
RENDER_NEURON_MORPHOLOGY_PROGRESSIVE_SEQUENCE=no

# Render a static frame of the reconstructed mesh
#   Use ['yes' or '(no)']
RENDER_NEURON_MESH_IMAGE=no

## Render a 360 sequence of the reconstructed neuron mesh
#   Use ['yes' or '(no)']
RENDER_NEURON_MESH_360_SEQUENCE=no

## The rendering view defines the extent of the image w.r.t the morphology  
    # Use ['wide-shot'] to render a wide-shot view of the morphology 
    # Use ['(mid-shot)'] to render a mid-shot showing the reconstructed components only
    # Use ['close-up'] to render a close-up around the soma with a given dimensions
RENDERING_VIEW=mid-shot

## Renders the frames to scale that is a factor of the largest dimension of the morphology
## You can set the scale factor in the resolution scale factor parameter 
#   Use ['yes' or '(no)']
RENDER_IMAGES_TO_SCALE=yes

## Frame resolution (only used if RENDER_IMAGES_TO_SCALE is set to no), default 1024
#   Range [512 - 10000]
FRAME_RESOLUTION=5000

## Frame scale factor (only in case of RENDER_TO_SCALE is set to yes), default 1.0
#   Range [1 - 10]
RESOLUTION_SCALE_FACTOR=5.0

## Close up view dimensions (in microns), only when RENDERING_VIEW=close-up
# Range [10 - 1000]
CLOSEUP_VIEW_DIMENSIONS=15

## The rendering view
# NOTE: Animated sequences like 360s and progressive renderings will be always rendered from front
    # Use ['front'] for the front view
    # Use ['side'] for the side view
    # Use ['top'] for the top view
    # Use ['all]' for rendering all the views.
CAMERA_VIEW=front

## The file format of the image
    # Use ['png'] to render .png images
    # Use ['tiff'] to render .tiff images
    # Use ['exr'] to render .exr images
IMAGE_FILE_FORMAT=png

## Render scale bar
#   Use ['yes' or '(no)']
RENDER_SCALE_BAR=no